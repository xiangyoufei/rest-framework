1. 现在想要在程序启动的时候执行某些事情，可以让该类实现InitializingBean接口，重写里面的afterPropertiesSet方法
	也可以使用spring的配置注解，在配置类@Configuration 中使用 @Bean 注册bean 实例也可以


2. 使用@value方法，可以直接使用配置文件中的数据。

3. 关于过滤器，可以使用@WebFilter注解，
	也可以使用配置类@Configuration，注册bean实例，使用FilterRegistrationBean

4.@Primary 当有两个实现类的时候 可以用此注解表明主要对象，还有@Autowired(required=false)也可以实现，此种注解可用在调用
	第三方类 重写其方法。 
5 spring框架还提供了很多@Condition给我们用，当然总结用语哪种好理解，看给位读者喽

@ConditionalOnBean（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）
@ConditionalOnClass（某个class位于类路径上，才会实例化一个Bean）
@ConditionalOnExpression（当表达式为true的时候，才会实例化一个Bean）
@ConditionalOnMissingBean（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）
@ConditionalOnMissingClass（某个class类路径上不存在的时候，才会实例化一个Bean）
@ConditionalOnProperty：如果Envrionment中存在此property、或者相应的property参数值匹配时，则执行。比如springboot中，各种内置的组件是否enabled，就是根据此条件判断
@ConditionalOnNotWebApplication（不是web应用）
@EnableTransactionManagement注解放到一个@Configuration类上，配置好事务管理器，并启用事务管理。
@Transactional注解放到类上或方法上，可以设置注解的属性，表明该方法按配置好的属性参与到事务中。

后续会继续补充

另一种总结

@ConditionalOnClass：该注解的参数对应的类必须存在，否则不解析该注解修饰的配置类；
@ConditionalOnMissingBean：该注解表示，如果存在它修饰的类的bean，则不需要再创建这个bean；
	可以给该注解传入参数例如@ConditionOnMissingBean(name = "example")，
	s这个表示如果name为“example”的bean存在，这该注解修饰的代码块不执行。
	
	
Spring初始化bean的时候，如果bean实现了InitializingBean接口，会自动调用afterPropertiesSet方法。
 * 	并且同时在配置文件中指定了init-method，系统则是先调用afterPropertiesSet方法，然后在调用init-method中指定的方法。
 * 	也就是说这个方法在spring启动时候优先调用
 *  当然为了初始化某个方法，也可以使用init-method在配置文件设置，但是启动顺序 InitializingBean 更早
 
 
分页插件的使用：https://github.com/pagehelper/Mybatis-PageHelper 
 可以直接返回totalCount  直接使用PageInfo 对象包装查询结果，然后获取总页数

@AutoConfigureAfter
